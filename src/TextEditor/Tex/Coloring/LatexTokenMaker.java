/* The following code was generated by JFlex 1.4.1 on 28/04/2021 10:28 */

/*
 * 04/24/2012
 *
 * Maxence Miguel-Brebion 
 *
 * LatexTokenMaker.java - Scanner for LaTeX.
 * 
 * This library is distributed under a modified BSD license.  See the included
 * LICENSE file for details.
 */
package TextEditor.Tex.Coloring;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated <code>LatexTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell & Maxence Miguel-Brebion
 * @version 0.6
 *
 */

public class LatexTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 0;

  /** lexical states */
  public static final int HIDDEN_ADDQ = 5;
  public static final int EOL_COMMENT = 1;
  public static final int MLE_IN_A = 4;
  public static final int MLE = 2;
  public static final int ADDA = 8;
  public static final int MLE_IN_Q = 3;
  public static final int ADDQ = 7;
  public static final int YYINITIAL = 0;
  public static final int HIDDEN_ADDA = 6;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\42\1\0\1\3\23\0\1\3\3\5\1\21\1\4"+
    "\1\5\1\2\2\5\1\14\1\5\1\20\1\1\2\5\12\1\6\5"+
    "\5\1\1\31\12\1\1\41\1\16\1\17\10\1\1\13\1\10\1\15"+
    "\1\5\1\1\1\0\1\35\1\22\1\33\1\26\1\11\1\1\1\23"+
    "\1\1\1\24\4\1\1\25\1\37\1\34\1\12\1\30\1\36\1\27"+
    "\1\40\2\1\1\32\2\1\1\6\1\5\1\7\1\5\61\0\1\1"+
    "\17\0\1\1\10\0\1\1\26\0\1\1\1\0\1\1\4\0\5\1"+
    "\2\0\2\1\4\0\1\1\1\0\1\1\2\0\1\1\1\0\2\1"+
    "\uff03\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\2\1\1\2\1\3\1\4\2\1\1\5\1\3"+
    "\2\6\1\7\1\10\1\6\2\11\1\12\1\11\2\13"+
    "\1\14\1\13\2\15\1\16\1\17\1\15\2\20\1\21"+
    "\1\22\1\20\1\23\1\1\1\23\1\24\1\25\1\1"+
    "\1\24\1\1\1\26\1\27\6\26\1\0\1\6\1\11"+
    "\1\13\11\26\1\30\2\26\1\31\1\1\1\26\1\32"+
    "\1\1\4\26\1\33\1\1\1\34\2\1\1\0\1\1"+
    "\1\0\1\1\4\26\4\1\1\0\1\1\1\0\1\1"+
    "\4\26\4\1\1\35\1\36\1\1\2\0\3\26\1\1"+
    "\2\0\1\26\1\0\1\26\1\37\1\26\1\40\1\0"+
    "\2\26\1\40\4\26\1\0\1\26\1\41\1\0\1\26"+
    "\1\41\1\0\1\42\1\0\1\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\151\0\214\0\257\0\322\0\365"+
    "\0\u0118\0\u013b\0\u015e\0\u013b\0\u0181\0\u013b\0\u01a4\0\u01c7"+
    "\0\u013b\0\u013b\0\u013b\0\u01ea\0\u013b\0\u013b\0\u020d\0\u013b"+
    "\0\u0230\0\u013b\0\u0253\0\u013b\0\u0276\0\u013b\0\u0299\0\u013b"+
    "\0\u02bc\0\u013b\0\u013b\0\u02df\0\u013b\0\u0302\0\u013b\0\u013b"+
    "\0\u0325\0\u013b\0\u0348\0\u01c7\0\u013b\0\u013b\0\u036b\0\u01c7"+
    "\0\u038e\0\u03b1\0\u013b\0\u03d4\0\u03f7\0\u041a\0\u043d\0\u0460"+
    "\0\u0483\0\u04a6\0\u04c9\0\u04ec\0\u050f\0\u0532\0\u0555\0\u0578"+
    "\0\u059b\0\u05be\0\u05e1\0\u0604\0\u0627\0\u064a\0\u013b\0\u066d"+
    "\0\u0690\0\u013b\0\u06b3\0\u06d6\0\u013b\0\u06f9\0\u071c\0\u073f"+
    "\0\u0762\0\u0785\0\u013b\0\u07a8\0\u013b\0\u07cb\0\u07ee\0\u0811"+
    "\0\u0834\0\u0857\0\u087a\0\u089d\0\u08c0\0\u08e3\0\u0906\0\u0929"+
    "\0\u094c\0\u096f\0\u0992\0\u09b5\0\u09d8\0\u09fb\0\u0a1e\0\u0a41"+
    "\0\u0a64\0\u0a87\0\u0aaa\0\u0acd\0\u0af0\0\u0b13\0\u0b36\0\u013b"+
    "\0\u013b\0\u0b59\0\u0b7c\0\u0b9f\0\u0bc2\0\u0be5\0\u0c08\0\u0c2b"+
    "\0\u0c4e\0\u0c71\0\u0c94\0\u0cb7\0\u0cda\0\u013b\0\u0cfd\0\u013b"+
    "\0\u0d20\0\u0d43\0\u0d66\0\u0cb7\0\u0d89\0\u0dac\0\u0dcf\0\u0df2"+
    "\0\u0e15\0\u0e38\0\u013b\0\u0e5b\0\u0e7e\0\u0e15\0\u0ea1\0\u013b"+
    "\0\u0ec4\0\u0ea1";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\1\12\1\14\1\15\1\13\2\16\1\17"+
    "\10\13\1\20\20\13\1\21\42\22\1\0\1\23\1\24"+
    "\3\23\1\24\1\25\1\26\1\27\10\24\1\23\20\24"+
    "\1\0\1\30\1\31\3\30\1\31\1\25\1\32\1\33"+
    "\10\31\1\30\20\31\1\0\1\34\1\35\3\34\1\35"+
    "\1\25\1\36\1\37\10\35\1\34\20\35\1\0\1\40"+
    "\1\41\3\40\1\41\1\42\1\43\1\44\10\41\1\40"+
    "\20\41\1\0\1\45\1\46\3\45\1\46\1\47\1\50"+
    "\1\51\10\46\1\45\20\46\1\0\1\52\1\13\1\12"+
    "\1\14\1\15\1\13\1\25\1\36\1\53\10\13\1\54"+
    "\20\13\1\0\1\55\1\13\1\12\1\14\1\15\1\13"+
    "\1\56\1\26\1\57\10\13\1\60\20\13\45\0\1\13"+
    "\3\0\1\13\2\0\1\61\10\13\1\0\20\13\2\0"+
    "\3\15\1\0\35\15\2\0\1\62\2\0\1\63\3\13"+
    "\1\61\1\64\1\62\3\13\1\65\1\62\1\13\1\0"+
    "\1\66\4\62\1\67\4\62\1\70\1\62\1\71\3\62"+
    "\2\0\3\72\1\0\14\72\1\0\20\72\2\0\1\24"+
    "\3\0\1\24\2\0\1\73\10\24\1\0\20\24\2\0"+
    "\1\24\2\0\1\63\3\24\1\73\10\24\1\0\20\24"+
    "\2\0\1\31\3\0\1\31\2\0\1\74\10\31\1\0"+
    "\20\31\2\0\1\31\2\0\1\63\3\31\1\74\10\31"+
    "\1\0\20\31\2\0\1\35\3\0\1\35\2\0\1\75"+
    "\10\35\1\0\20\35\2\0\1\35\2\0\1\63\3\35"+
    "\1\75\10\35\1\0\20\35\2\0\1\41\3\0\1\41"+
    "\2\0\1\44\10\41\1\0\20\41\2\0\1\41\3\0"+
    "\3\41\1\44\10\41\1\0\20\41\2\0\1\46\3\0"+
    "\1\46\2\0\1\51\10\46\1\0\20\46\2\0\1\46"+
    "\3\0\3\46\1\51\10\46\1\0\20\46\2\0\1\62"+
    "\2\0\1\63\3\13\1\61\1\76\1\62\3\13\2\62"+
    "\1\13\1\0\1\66\17\62\2\0\1\62\2\0\1\63"+
    "\3\13\1\61\1\77\1\62\3\13\2\62\1\13\1\0"+
    "\1\66\17\62\2\0\1\13\3\0\3\13\1\61\10\13"+
    "\1\0\20\13\2\0\1\62\3\0\1\13\2\0\1\61"+
    "\2\62\3\13\2\62\1\13\1\0\20\62\2\0\1\62"+
    "\3\0\1\13\2\0\1\61\1\62\1\100\3\13\2\62"+
    "\1\13\1\0\3\62\1\101\14\62\2\0\1\62\3\0"+
    "\1\13\2\0\1\61\2\62\3\13\1\62\1\102\1\13"+
    "\1\0\20\62\2\0\1\62\3\0\1\13\2\0\1\61"+
    "\1\103\1\62\3\13\2\62\1\13\1\0\20\62\2\0"+
    "\1\62\3\0\1\13\2\0\1\61\2\62\3\13\2\62"+
    "\1\13\1\0\2\62\1\104\15\62\2\0\1\62\3\0"+
    "\1\13\2\0\1\61\2\62\3\13\2\62\1\13\1\0"+
    "\13\62\1\105\4\62\2\0\1\62\3\0\1\13\2\0"+
    "\1\61\2\62\3\13\2\62\1\13\1\0\15\62\1\106"+
    "\2\62\2\0\3\72\1\0\14\72\1\107\20\72\2\0"+
    "\1\24\3\0\3\24\1\73\10\24\1\0\20\24\2\0"+
    "\1\31\3\0\3\31\1\74\10\31\1\0\20\31\2\0"+
    "\1\35\3\0\3\35\1\75\10\35\1\0\20\35\2\0"+
    "\1\62\3\0\1\13\2\0\1\61\1\62\1\110\3\13"+
    "\2\62\1\13\1\0\3\62\1\101\14\62\2\0\1\62"+
    "\3\0\1\13\2\0\1\61\1\62\1\111\3\13\2\62"+
    "\1\13\1\0\3\62\1\101\14\62\2\0\1\62\3\0"+
    "\1\13\1\112\1\0\1\61\2\62\1\113\2\13\2\62"+
    "\1\13\1\0\20\62\2\0\1\62\3\0\1\13\2\0"+
    "\1\61\2\62\3\13\2\62\1\13\1\0\4\62\1\114"+
    "\13\62\2\0\1\62\3\0\1\13\1\115\1\0\1\61"+
    "\2\62\1\116\2\13\2\62\1\13\1\0\20\62\2\0"+
    "\1\62\3\0\1\13\2\0\1\61\2\62\3\13\2\62"+
    "\1\13\1\0\1\62\1\117\16\62\2\0\1\62\3\0"+
    "\1\13\2\0\1\61\2\62\3\13\2\62\1\13\1\0"+
    "\5\62\1\120\12\62\2\0\1\62\3\0\1\13\2\0"+
    "\1\61\2\62\3\13\2\62\1\13\1\0\6\62\1\121"+
    "\11\62\2\0\1\62\3\0\1\13\2\0\1\61\2\62"+
    "\3\13\2\62\1\13\1\0\16\62\1\122\1\62\2\0"+
    "\1\62\3\0\1\13\1\123\1\0\1\61\2\62\1\124"+
    "\2\13\2\62\1\13\1\0\20\62\2\0\1\62\3\0"+
    "\1\13\1\125\1\0\1\61\2\62\1\126\2\13\2\62"+
    "\1\13\1\0\20\62\2\0\1\127\3\0\1\13\2\0"+
    "\1\61\2\127\3\13\2\127\1\13\1\0\20\127\2\0"+
    "\1\62\3\0\1\13\1\130\1\0\1\61\2\62\3\13"+
    "\2\62\1\13\1\0\20\62\2\0\1\131\1\0\1\132"+
    "\1\0\1\13\2\0\1\61\2\131\2\13\1\133\3\131"+
    "\1\0\20\131\2\0\1\62\3\0\1\13\2\0\1\61"+
    "\2\62\3\13\2\62\1\13\1\0\2\62\1\134\15\62"+
    "\2\0\1\62\3\0\1\13\2\0\1\61\2\62\3\13"+
    "\2\62\1\13\1\0\6\62\1\135\11\62\2\0\1\62"+
    "\3\0\1\13\2\0\1\61\2\62\3\13\2\62\1\13"+
    "\1\0\5\62\1\136\12\62\2\0\1\62\3\0\1\13"+
    "\2\0\1\61\2\62\3\13\2\62\1\13\1\0\14\62"+
    "\1\137\3\62\2\0\1\140\3\0\1\13\2\0\1\61"+
    "\2\140\3\13\2\140\1\13\1\0\20\140\2\0\1\141"+
    "\3\0\1\13\2\0\1\61\2\141\3\13\2\141\1\13"+
    "\1\0\20\141\2\0\1\127\3\0\1\13\2\0\1\61"+
    "\2\127\1\13\1\142\1\143\2\127\1\13\1\0\20\127"+
    "\2\0\1\144\7\0\2\144\3\0\2\144\2\0\20\144"+
    "\2\0\1\131\1\0\1\132\1\0\1\13\2\0\1\61"+
    "\2\131\2\13\1\145\3\131\1\0\20\131\2\0\1\132"+
    "\1\0\1\132\5\0\2\132\2\0\1\146\3\132\1\0"+
    "\20\132\2\0\1\13\3\0\1\13\2\0\1\61\2\13"+
    "\1\147\5\13\1\0\20\13\2\0\1\62\3\0\1\13"+
    "\2\0\1\61\2\62\3\13\2\62\1\13\1\0\3\62"+
    "\1\150\14\62\2\0\1\62\3\0\1\13\2\0\1\61"+
    "\1\151\1\62\3\13\2\62\1\13\1\0\20\62\2\0"+
    "\1\62\3\0\1\13\2\0\1\61\2\62\3\13\2\62"+
    "\1\13\1\0\2\62\1\152\15\62\2\0\1\62\3\0"+
    "\1\13\2\0\1\61\2\62\3\13\2\62\1\13\1\0"+
    "\17\62\1\153\2\0\1\140\3\0\1\13\2\0\1\61"+
    "\2\140\1\13\1\154\1\155\2\140\1\13\1\0\20\140"+
    "\2\0\1\141\3\0\1\13\2\0\1\61\2\141\1\13"+
    "\1\156\1\157\2\141\1\13\1\0\20\141\2\0\1\13"+
    "\3\0\1\13\2\0\1\61\4\13\1\143\3\13\1\0"+
    "\20\13\2\0\1\13\3\0\1\13\1\112\1\0\1\61"+
    "\10\13\1\0\20\13\2\0\1\144\5\0\1\160\1\0"+
    "\2\144\3\0\2\144\2\0\20\144\2\0\1\13\3\0"+
    "\1\13\1\161\1\0\1\61\10\13\1\0\20\13\7\0"+
    "\1\161\35\0\1\162\1\0\1\163\1\0\1\13\2\0"+
    "\1\61\2\162\3\13\3\162\1\0\20\162\2\0\1\62"+
    "\3\0\1\13\1\164\1\0\1\61\2\62\3\13\2\62"+
    "\1\13\1\0\20\62\2\0\1\62\3\0\1\13\2\0"+
    "\1\61\2\62\3\13\2\62\1\13\1\0\7\62\1\165"+
    "\10\62\2\0\1\62\3\0\1\13\2\0\1\61\1\166"+
    "\1\62\3\13\2\62\1\13\1\0\20\62\2\0\1\62"+
    "\3\0\1\13\2\0\1\61\2\62\3\13\2\62\1\13"+
    "\1\0\13\62\1\167\4\62\2\0\1\13\3\0\1\13"+
    "\2\0\1\61\4\13\1\155\3\13\1\0\20\13\2\0"+
    "\1\13\3\0\1\13\1\123\1\0\1\61\10\13\1\0"+
    "\20\13\2\0\1\13\3\0\1\13\2\0\1\61\4\13"+
    "\1\157\3\13\1\0\20\13\2\0\1\13\3\0\1\13"+
    "\1\125\1\0\1\61\10\13\1\0\20\13\2\0\1\162"+
    "\1\0\1\163\1\0\1\13\2\0\1\61\2\162\2\13"+
    "\1\170\3\162\1\0\20\162\2\0\1\163\1\0\1\163"+
    "\5\0\2\163\2\0\1\171\3\163\1\0\20\163\2\0"+
    "\1\172\7\0\2\172\3\0\2\172\2\0\20\172\2\0"+
    "\1\62\3\0\1\13\2\0\1\61\2\62\3\13\2\62"+
    "\1\13\1\0\10\62\1\173\7\62\2\0\1\62\3\0"+
    "\1\13\1\174\1\0\1\61\2\62\3\13\2\62\1\13"+
    "\1\0\20\62\2\0\1\62\3\0\1\13\2\0\1\61"+
    "\2\62\3\13\2\62\1\13\1\0\6\62\1\175\11\62"+
    "\2\0\1\13\3\0\1\13\1\115\1\0\1\61\10\13"+
    "\1\0\20\13\7\0\1\115\35\0\1\172\5\0\1\176"+
    "\1\0\2\172\3\0\2\172\2\0\20\172\2\0\1\62"+
    "\3\0\1\13\2\0\1\61\1\177\1\62\3\13\2\62"+
    "\1\13\1\0\20\62\2\0\3\174\1\0\1\174\1\0"+
    "\1\200\1\201\10\174\1\0\20\174\2\0\1\62\3\0"+
    "\1\13\2\0\1\61\2\62\3\13\2\62\1\13\1\0"+
    "\5\62\1\202\12\62\2\0\1\62\3\0\1\13\2\0"+
    "\1\61\2\62\3\13\2\62\1\13\1\0\6\62\1\203"+
    "\11\62\2\0\3\174\1\0\2\174\1\204\1\201\10\174"+
    "\1\0\20\174\2\0\1\62\3\0\1\13\2\0\1\61"+
    "\2\62\3\13\2\62\1\13\1\0\2\62\1\205\15\62"+
    "\2\0\1\62\3\0\1\13\2\0\1\61\2\62\3\13"+
    "\2\62\1\13\1\0\11\62\1\206\6\62\2\0\1\62"+
    "\3\0\1\13\2\0\1\61\1\207\1\62\3\13\2\62"+
    "\1\13\1\0\20\62\2\0\1\62\3\0\1\13\2\0"+
    "\1\61\2\62\3\13\2\62\1\13\1\0\2\62\1\210"+
    "\15\62\2\0\1\62\3\0\1\13\1\211\1\0\1\61"+
    "\2\62\3\13\2\62\1\13\1\0\20\62\2\0\1\62"+
    "\3\0\1\13\2\0\1\61\2\62\3\13\2\62\1\13"+
    "\1\0\11\62\1\212\6\62\2\0\3\211\1\0\1\211"+
    "\1\0\1\213\1\214\10\211\1\0\20\211\2\0\1\62"+
    "\3\0\1\13\2\0\1\61\1\215\1\62\3\13\2\62"+
    "\1\13\1\0\20\62\2\0\3\211\1\0\2\211\1\216"+
    "\1\214\10\211\1\0\20\211\2\0\1\62\3\0\1\13"+
    "\1\217\1\0\1\61\2\62\3\13\2\62\1\13\1\0"+
    "\20\62\2\0\3\217\1\0\1\217\1\0\1\220\1\221"+
    "\10\217\1\0\20\217\2\0\3\217\1\0\2\217\1\222"+
    "\1\221\10\217\1\0\20\217\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3815];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\1\1\1\11\1\1\1\11\2\1\3\11"+
    "\1\1\2\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\2\11\1\1\1\11"+
    "\1\1\2\11\1\1\1\11\2\1\2\11\4\1\1\11"+
    "\6\1\1\0\14\1\1\11\2\1\1\11\2\1\1\11"+
    "\5\1\1\11\1\1\1\11\2\1\1\0\1\1\1\0"+
    "\11\1\1\0\1\1\1\0\11\1\2\11\1\1\2\0"+
    "\4\1\2\0\1\1\1\0\1\1\1\11\1\1\1\11"+
    "\1\0\7\1\1\0\1\1\1\11\1\0\2\1\1\0"+
    "\1\11\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */

// external state of file

public static String login="original";


// tokens
public static final int TOKEN_ADDQ=24;
public static final int TOKEN_ADDA=25;
public static final int TOKEN_ADDQ_H=26;
public static final int TOKEN_ADDA_H=27;
public static final int TOKEN_INLINE_EQ=30;
public static final int TOKEN_MLE=32;
public static final int TOKEN_MLE_IN_Q=33;
public static final int TOKEN_MLE_IN_A=34;
public static final int TOKEN_PART=37;
public static final int TOKEN_SUB_PART=38;
public static final int TOKEN_TITLE=39;

// serializing constants for multiline paterns
public static final int BALANCE_MULT = 1000;
public static final int BALANCE_DEC = 0; // cumulative balance of bracket should never be negative ;-)
public static final int FORMER_BALANCE_MULT = BALANCE_MULT*100;
public static final int FIRST_MULT = FORMER_BALANCE_MULT*10;

// lastToken = token_type + BALANCE_MULT*(balance + dec) +FORMER_BALANCE_MULT*formerBalanceCount 
// where balance is nb of "{" minus nb of "}" for the current line
// and block is the amount of blocks already recovered (\frac{a}{v} requires two for instance)
// and first is 1 if a multiline block started on this line ; 0 else

        protected int bracketCount=0;
        protected int formerBalanceCount=0;
        protected boolean first = false; // boolean flag used for indentation at the begining of a new block

	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public LatexTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * ${inheritDoc}
	 */
	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "%", null };
	}

        /**
        *          DEALING WITH INDENT
        **/
       @Override
        public boolean getShouldIndentNextLineAfter(Token token) {
            if (!first || token==null){return false;}
            
            switch(token.getType()%BALANCE_MULT){
                 case  TOKEN_ADDQ :
                    return true;
                    
                case  TOKEN_MLE :
                    return true;
                    
                case TOKEN_MLE_IN_A:
                    return true;
                    
                case TOKEN_MLE_IN_Q :
                    return true;

                case Token.RESERVED_WORD :
                    return true;
            }
               

            return false;
        }


        /**
        *          DEALING WITH BRACKETS
        **/

    

        public void initBracketBlock(){
            formerBalanceCount = 0;
            bracketCount = 0;
        }

        public void enterBracketBlock(){
            formerBalanceCount = bracketCount; // the bracketCount must be saved as we may be in a block inside a former block which will need to be closed after
            bracketCount = 0;
        }

        public void leaveBracketBlock(){
            bracketCount = formerBalanceCount;
            formerBalanceCount = 0; 
        }

        public int getLastTokenVal(int tokenType){
            return tokenType + BALANCE_MULT*(bracketCount + BALANCE_DEC) + FORMER_BALANCE_MULT * formerBalanceCount ;
        }

        

        public void addOpenBracket(){
            bracketCount ++;
        }

        public void addCloseBracket(){
            bracketCount -- ;
        }

        public boolean isEndOfBlock(){
            return bracketCount==0;
        }

    public void conditionalReturnToInitial(int state) {
        // check wheter in bracker block is closed and switch state if yes.
        if (isEndOfBlock()) {
            leaveBracketBlock();
            switch(zzLexicalState){
                case  ADDQ:
                    this.addToken(TOKEN_ADDQ);
                    break;
                    
                case ADDA:
                    this.addToken(TOKEN_ADDA);
                    break;
                    
                default:
                    this.addToken(Token.SEPARATOR);
                    break;
            
            }

            yybegin(state);

        } else {
            this.addToken(Token.SEPARATOR);
        }
    }

        
        public void conditionalSwitch(String logins, int stateTrue, int stateFalse){
            int newState =  logins.contains(login) ? stateTrue : stateFalse;
            yybegin(newState);
        }

        /**
        *   Dealing with blocks
        **/

        /**
        * function called when an inline eq is parsed
        */
        public void parseInlineEq() {
            int s = zzStartRead;
            int e = zzMarkedPos - 1;
            String txt = yytext().replace("\\{", "XX").replace("\\}", "YY");
            for (int i=0; i<txt.length();i++){
                if (txt.charAt(i)=='{'){
                    this.addOpenBracket();
                    this.addToken(s+i, s+i, Token.SEPARATOR);
                } 
                else if (txt.charAt(i)=='}') {
                    this.addCloseBracket();
                    this.addToken(s+i, s+i, Token.SEPARATOR);
                }else{
                    this.addToken(s+i, s+i, TOKEN_INLINE_EQ);
                }
            }
         }


        public void beginMLE(int newState){
            addToken(zzStartRead,zzMarkedPos-2, Token.FUNCTION);
            addToken(zzMarkedPos-1,zzMarkedPos-1, Token.SEPARATOR);
            first=true;
            enterBracketBlock();
            addOpenBracket();
            yybegin(newState);
        }

        public void beginADDQ(int newState){
            addToken(zzStartRead,zzMarkedPos-2, TOKEN_ADDQ);
            addToken(zzMarkedPos-1,zzMarkedPos-1, TOKEN_ADDQ);
            first=true;
            initBracketBlock();
            addOpenBracket();
            yybegin(newState);
        }

	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	@Override
	public Token getTokenList(Segment text, int previousLineData, int startOffset) {

		resetTokenList();
                
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = YYINITIAL;

                // deserialize initialTokenType : 
                first = false;
                int initialTokenType =  previousLineData % BALANCE_MULT ;
                initBracketBlock(); // to be removed ?
                formerBalanceCount =  (previousLineData)/ FORMER_BALANCE_MULT;
                bracketCount = (previousLineData%FORMER_BALANCE_MULT) / BALANCE_MULT - BALANCE_DEC;
                    
                start = text.offset;
	        switch (initialTokenType) {
		
			case TOKEN_MLE:
				state = MLE;
				break;

                         case TOKEN_MLE_IN_Q:
				state = MLE_IN_Q;
				break;

                         case TOKEN_MLE_IN_A:
				state = MLE_IN_A;
				break;

                         case TOKEN_ADDQ:
				state = ADDQ;
				break;

                         case TOKEN_ADDQ_H:
				state = HIDDEN_ADDQ;
				break;

                         case TOKEN_ADDA_H:
				state = HIDDEN_ADDA;
				break;

                         case TOKEN_ADDA:
				state = ADDA;
				break;

			default:
				state = YYINITIAL;
                                 initBracketBlock();
		}
                               

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 * @exception   IOException  if any I/O-Error occurs.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LatexTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LatexTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10: 
          { addCloseBracket(); conditionalReturnToInitial(ADDQ);
          }
        case 35: break;
        case 33: 
          { int temp = zzStartRead+4;
                                                     addToken(temp-4,temp+6,Token.FUNCTION); 
                                                     addToken(temp+7,temp+7,Token.SEPARATOR); 
                                                     addToken(temp+8,zzMarkedPos-2,TOKEN_SUB_PART); 
                                                     addToken(zzMarkedPos-1,zzMarkedPos-1,Token.SEPARATOR);
          }
        case 36: break;
        case 19: 
          { addToken( TOKEN_ADDQ);
          }
        case 37: break;
        case 31: 
          { int temp = zzStartRead;
                                                addToken(temp, temp+5, Token.RESERVED_WORD);
                                                addToken(temp+6, temp+6, Token.RESERVED_WORD);
                                                addToken(temp+7, zzMarkedPos-2, Token.RESERVED_WORD);
                                                addToken(zzMarkedPos-1, zzMarkedPos-1, Token.RESERVED_WORD);
                                                first = true;
          }
        case 38: break;
        case 29: 
          { int temp = zzStartRead;
                                                addToken(temp, temp+3, Token.RESERVED_WORD);
                                                addToken(temp+4, temp+4, Token.RESERVED_WORD);
                                                addToken(temp+5, zzMarkedPos-2, Token.RESERVED_WORD);
                                                addToken(zzMarkedPos-1, zzMarkedPos-1, Token.RESERVED_WORD);
          }
        case 39: break;
        case 23: 
          { int temp = zzStartRead; addToken(temp, temp, Token.SEPARATOR); addToken(temp + 1, temp + 1, Token.IDENTIFIER);
          }
        case 40: break;
        case 5: 
          { addNullToken(); return firstToken;
          }
        case 41: break;
        case 14: 
          { addToken( TOKEN_ADDQ_H); addOpenBracket();
          }
        case 42: break;
        case 8: 
          { addCloseBracket(); conditionalReturnToInitial(YYINITIAL);
          }
        case 43: break;
        case 32: 
          { int temp = zzStartRead;
                                                     addToken(temp,temp+6,Token.FUNCTION); 
                                                     addToken(temp+7,temp+7,Token.SEPARATOR); 
                                                     addToken(temp+8,zzMarkedPos-2,TOKEN_PART); 
                                                     addToken(zzMarkedPos-1,zzMarkedPos-1,Token.SEPARATOR);
          }
        case 44: break;
        case 24: 
          { parseInlineEq();
          }
        case 45: break;
        case 9: 
          { addToken( TOKEN_MLE_IN_Q);
          }
        case 46: break;
        case 12: 
          { addCloseBracket(); conditionalReturnToInitial(ADDA);
          }
        case 47: break;
        case 17: 
          { addToken( TOKEN_ADDA_H); addOpenBracket();
          }
        case 48: break;
        case 20: 
          { addToken( TOKEN_ADDA);
          }
        case 49: break;
        case 15: 
          { addToken( TOKEN_ADDQ_H); addCloseBracket(); conditionalReturnToInitial(HIDDEN_ADDA);
          }
        case 50: break;
        case 2: 
          { addToken(Token.WHITESPACE);
          }
        case 51: break;
        case 30: 
          { String logins = yytext(); first=true;
                                                      
                                                         addToken(TOKEN_ADDQ);
                                                      initBracketBlock(); addOpenBracket();
                                                      logins=logins.substring(4,logins.length()-2);
                                                      conditionalSwitch(logins,ADDQ,HIDDEN_ADDQ);
          }
        case 52: break;
        case 11: 
          { addToken( TOKEN_MLE_IN_A);
          }
        case 53: break;
        case 25: 
          { beginMLE(MLE);
          }
        case 54: break;
        case 4: 
          { addToken(Token.SEPARATOR);
          }
        case 55: break;
        case 21: 
          { addToken( bracketCount == 0 ? TOKEN_ADDA : Token.SEPARATOR); addOpenBracket();
          }
        case 56: break;
        case 18: 
          { addToken( TOKEN_ADDA_H); addCloseBracket(); conditionalReturnToInitial(YYINITIAL);
          }
        case 57: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 58: break;
        case 22: 
          { addToken(Token.FUNCTION);
          }
        case 59: break;
        case 13: 
          { addToken( TOKEN_ADDQ_H);
          }
        case 60: break;
        case 6: 
          { addToken( TOKEN_MLE);
          }
        case 61: break;
        case 34: 
          { int temp = zzStartRead+7;
                                                     addToken(temp-7,temp+6,Token.FUNCTION); 
                                                     addToken(temp+7,temp+7,Token.SEPARATOR); 
                                                     addToken(temp+8,zzMarkedPos-2,TOKEN_TITLE); 
                                                     addToken(zzMarkedPos-1,zzMarkedPos-1,Token.SEPARATOR);
          }
        case 62: break;
        case 27: 
          { beginMLE(MLE_IN_Q);
          }
        case 63: break;
        case 16: 
          { addToken( TOKEN_ADDA_H);
          }
        case 64: break;
        case 7: 
          { addToken( Token.SEPARATOR); addOpenBracket();
          }
        case 65: break;
        case 26: 
          { beginADDQ(ADDQ);
          }
        case 66: break;
        case 28: 
          { beginMLE(MLE_IN_A);
          }
        case 67: break;
        case 3: 
          { addToken(Token.COMMENT_EOL);
          }
        case 68: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case HIDDEN_ADDQ: {
              addToken( getLastTokenVal(TOKEN_ADDQ_H)); return firstToken;
            }
            case 147: break;
            case EOL_COMMENT: {
              addToken( Token.NULL); return firstToken;
            }
            case 148: break;
            case MLE_IN_A: {
              addToken( getLastTokenVal(TOKEN_MLE_IN_A)); return firstToken;
            }
            case 149: break;
            case MLE: {
              addToken( getLastTokenVal(TOKEN_MLE)); return firstToken;
            }
            case 150: break;
            case ADDA: {
              addToken( getLastTokenVal(TOKEN_ADDA)); return firstToken;
            }
            case 151: break;
            case MLE_IN_Q: {
              addToken( getLastTokenVal(TOKEN_MLE_IN_Q)); return firstToken;
            }
            case 152: break;
            case ADDQ: {
              addToken( getLastTokenVal(TOKEN_ADDQ)); return firstToken;
            }
            case 153: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 154: break;
            case HIDDEN_ADDA: {
              addToken( getLastTokenVal(TOKEN_ADDA_H)); return firstToken;
            }
            case 155: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
